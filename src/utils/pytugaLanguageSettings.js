import * as monaco from "monaco-editor";

export default function () {
  monaco.languages.register({ id: "pytuga" });
  monaco.languages.setLanguageConfiguration("pytuga", {
    comments: {
      lineComment: "#",
      blockComment: ["'''", "'''"],
    },
    brackets: [
      ["{", "}"],
      ["[", "]"],
      ["(", ")"],
    ],
    autoClosingPairs: [
      { open: "{", close: "}" },
      { open: "[", close: "]" },
      { open: "(", close: ")" },
      { open: '"', close: '"', notIn: ["string"] },
      { open: "'", close: "'", notIn: ["string", "comment"] },
    ],
    surroundingPairs: [
      { open: "{", close: "}" },
      { open: "[", close: "]" },
      { open: "(", close: ")" },
      { open: '"', close: '"' },
      { open: "'", close: "'" },
    ],
    onEnterRules: [
      {
        beforeText: new RegExp(
          "^\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\s*$"
        ),
        action: { indentAction: monaco.languages.IndentAction.Indent },
      },
    ],
    folding: {
      offSide: true,
      markers: {
        start: new RegExp("^\\s*#region\\b"),
        end: new RegExp("^\\s*#endregion\\b"),
      },
    },
  });
  monaco.languages.setMonarchTokensProvider("pytuga", {
    defaultToken: "",
    tokenPostfix: ".python",

    keywords: [
      "and",
      "as",
      "assert",
      "break",
      "class",
      "continue",
      "def",
      "del",
      "elif",
      "else",
      "except",
      "exec",
      "finally",
      "for",
      "from",
      "global",
      "if",
      "import",
      "in",
      "is",
      "lambda",
      "None",
      "not",
      "or",
      "pass",
      "print",
      "raise",
      "return",
      "self",
      "try",
      "while",
      "with",
      "yield",

      "int",
      "float",
      "long",
      "complex",
      "hex",

      "abs",
      "all",
      "any",
      "apply",
      "basestring",
      "bin",
      "bool",
      "buffer",
      "bytearray",
      "callable",
      "chr",
      "classmethod",
      "cmp",
      "coerce",
      "compile",
      "complex",
      "delattr",
      "dict",
      "dir",
      "divmod",
      "enumerate",
      "eval",
      "execfile",
      "file",
      "filter",
      "format",
      "frozenset",
      "getattr",
      "globals",
      "hasattr",
      "hash",
      "help",
      "id",
      "input",
      "intern",
      "isinstance",
      "issubclass",
      "iter",
      "len",
      "locals",
      "list",
      "map",
      "max",
      "memoryview",
      "min",
      "next",
      "object",
      "oct",
      "open",
      "ord",
      "pow",
      "print",
      "property",
      "reversed",
      "range",
      "raw_input",
      "reduce",
      "reload",
      "repr",
      "reversed",
      "round",
      "set",
      "setattr",
      "slice",
      "sorted",
      "staticmethod",
      "str",
      "sum",
      "super",
      "tuple",
      "type",
      "unichr",
      "unicode",
      "vars",
      "xrange",
      "zip",

      "True",
      "False",

      "__dict__",
      "__methods__",
      "__members__",
      "__class__",
      "__bases__",
      "__name__",
      "__mro__",
      "__subclasses__",
      "__init__",
      "__import__",

      "enquanto",
      "para",
      "quebre",
      "quebrar",
      "continuar",
      "para_cada",
      "se",
      "senão",
      "senao",
      "ou_então_se",
      "ou_entao_se",
      "ou_se",
      "Falso",
      "falso",
      "Verdadeiro",
      "verdadeiro",
      "nulo",
      "Nulo",
      "é",
      "eh",
      "e",
      "ou",
      "não",
      "nao",
      "em",
      "na",
      "no",
      "como",
      "função",
      "funcao",
      "definir",
      "defina",
      "retorne",
      "retornar",
      "gere",
      "gerar",
      "tente",
      "tentar",
      "exceção",
      "excecao",
      "finalmente",
      "levante_error",
      "levantar_erro",
      "apague",
      "apagar",
      "prossiga",
      "prosseguir",
      "classe",
      "importe",
      "importar",
      "usando",
      "até",
      "ateh",
      "faça :",
      "faca :",
      "fazer :",
      "para cada",
      "então faça :",
      "então :",
      "entao faca :",
      "entao :",
      "ou então se",
      "ou entao se",
      "ou se",
      "definir função",
      "definir funcao",
      "defina função",
      "defina funcao",
      "definir classe",
      "defina classe",
      "trás",
      "círculo",
      "limpar",
      "cor",
      "graus",
      "distancia",
      "produto_escalar",
      "abaixar_caneta",
      "frente",
      "definir_cor",
      "get_poly",
      "getpen",
      "obter_tela",
      "get_shapepoly",
      "tartaruga",
      "vai_para",
      "cabeçalho",
      "casa",
      "ht",
      "está_para_baixo",
      "é_visível",
      "esquerda",
      "esq",
      "ao_clicar",
      "arrastar",
      "no_lançamento",
      "pd",
      "caneta",
      "caneta_cor",
      "pendurada",
      "tamanho_de_caneta",
      "penitenciária",
      "posição",
      "pu",
      "radianos",
      "direita",
      "Redefinir",
      "modo_de_redimensionamento",
      "dir",
      "set",
      "inflexão",
      "setpos",
      "posição_definida",
      "ajustar_emaranhado",
      "setundobuffer",
      "setx",
      "sety",
      "forma",
      "tamanho_da_forma",
      "metamorfosear",
      "fator_de_cisalhamento",
      "showturtle",
      "definir_velocidade",
      "rua",
      "carimbo",
      "inclinar",
      "ângulo_de_inclinaçao",
      "em_direção",
      "tamanho_de_tartaruga",
      "desfazer",
      "desfazer_entradas_de_buffer",
      "acima",
      "largura",
      "escrever",
      "xcor",
      "ycor",
      "nonlocal",
      "repetir",
      "vezes",
      "faça",
      "faca",
      "para",
      "cada",
      "de",
      "até",
      "a",
      "em",
      "ou",
      "e",
      "não",
      "é",
      "definir",
      "defina",
      "repita",
      "função",
      "enquanto",
      "se",
      "então",
      "senão",
      "ResourceWarning",
      "ascii",
      "bin",
      "bytearray",
      "bytes",
      "exec",
      "format",
      "memoryview",
      "next",
      "print",
      "mostre",
      "mostrar",
      "leia_texto",
      "ler_texto",
      "leia_número",
      "ler_número",
    ],

    brackets: [
      { open: "{", close: "}", token: "delimiter.curly" },
      { open: "[", close: "]", token: "delimiter.bracket" },
      { open: "(", close: ")", token: "delimiter.parenthesis" },
    ],

    tokenizer: {
      root: [
        { include: "@whitespace" },
        { include: "@numbers" },
        { include: "@strings" },
        
        [/[,:;]/, "delimiter"],
        [/[{}\[\]()]/, "@brackets"],
        [/([a-zA-ZáàâãéèêíïóôõöúçñÁÀÂÃÉÈÊÍÏÓÔÕÖÚÇÑ]+)(?=\([^\)]*\)(\.[^\)]*\))?)/, 'variable.function'],
        
        [/@[a-zA-ZáàâãéèêíïóôõöúçñÁÀÂÃÉÈÊÍÏÓÔÕÖÚÇÑ][a-zA-ZáàâãéèêíïóôõöúçñÁÀÂÃÉÈÊÍÏÓÔÕÖÚÇÑ0-9_]*/, "tag"],
        [
          /[a-zA-ZáàâãéèêíïóôõöúçñÁÀÂÃÉÈÊÍÏÓÔÕÖÚÇÑ][a-zA-ZáàâãéèêíïóôõöúçñÁÀÂÃÉÈÊÍÏÓÔÕÖÚÇÑ0-9_]*/,
          {
            cases: {
              "@keywords": "keyword",
              "@default": "identifier",
            },
          },
        ],
      ],

      // Deal with white space, including single and multi-line comments
      whitespace: [
        [/\s+/, "white"],
        [/(^#.*$)/, "comment"],
        [/'''/, "string", "@endDocString"],
        [/"""/, "string", "@endDblDocString"],
      ],
      endDocString: [
        [/[^']+/, "string"],
        [/\\'/, "string"],
        [/'''/, "string", "@popall"],
        [/'/, "string"],
      ],
      endDblDocString: [
        [/[^"]+/, "string"],
        [/\\"/, "string"],
        [/"""/, "string", "@popall"],
        [/"/, "string"],
      ],

      // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
      numbers: [
        [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, "number.hex"],
        [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, "number"],
      ],

      // Recognize strings, including those broken across lines with \ (but not without)
      strings: [
        [/'$/, "string.escape", "@popall"],
        [/'/, "string.escape", "@stringBody"],
        [/"$/, "string.escape", "@popall"],
        [/"/, "string.escape", "@dblStringBody"],
      ],
      stringBody: [
        [/[^\\']+$/, "string", "@popall"],
        [/[^\\']+/, "string"],
        [/\\./, "string"],
        [/'/, "string.escape", "@popall"],
        [/\\$/, "string"],
      ],
      dblStringBody: [
        [/[^\\"]+$/, "string", "@popall"],
        [/[^\\"]+/, "string"],
        [/\\./, "string"],
        [/"/, "string.escape", "@popall"],
        [/\\$/, "string"],
      ],

    },
  });

  monaco.editor.defineTheme("pytugaTheme", {
    base: "vs-dark",
    inherit: true,
    rules: [
      {
        foreground: "50fa7b",
        token: "variable.function",
      },
      {
        background: "282a36",
        token: "",
      },
      {
        foreground: "6272a4",
        token: "comment",
      },
      {
        foreground: "f1fa8c",
        token: "string",
      },
      {
        foreground: "bd93f9",
        token: "constant.numeric",
      },
      {
        foreground: "bd93f9",
        token: "constant.language",
      },
      {
        foreground: "bd93f9",
        token: "constant.character",
      },
      {
        foreground: "bd93f9",
        token: "constant.other",
      },
      {
        foreground: "ffb86c",
        token: "variable.other.readwrite.instance",
      },
      {
        foreground: "ff79c6",
        token: "constant.character.escaped",
      },
      {
        foreground: "ff79c6",
        token: "constant.character.escape",
      },
      {
        foreground: "ff79c6",
        token: "string source",
      },
      {
        foreground: "ff79c6",
        token: "string source.ruby",
      },
      {
        foreground: "ff79c6",
        token: "keyword",
      },
      {
        foreground: "ff79c6",
        token: "storage",
      },
      {
        foreground: "8be9fd",
        fontStyle: "italic",
        token: "storage.type",
      },
      {
        foreground: "50fa7b",
        fontStyle: "underline",
        token: "entity.name.class",
      },
      {
        foreground: "50fa7b",
        fontStyle: "italic underline",
        token: "entity.other.inherited-class",
      },
      {
        foreground: "50fa7b",
        token: "entity.name.function",
      },
     

      {
        foreground: "ffb86c",
        fontStyle: "italic",
        token: "variable.parameter",
      },
      {
        foreground: "ff79c6",
        token: "entity.name.tag",
      },
      {
        foreground: "50fa7b",
        token: "entity.other.attribute-name",
      },
      {
        foreground: "FF0000",
        token: "support.function",
      },
      {
        foreground: "6be5fd",
        token: "support.constant",
      },
      {
        foreground: "66d9ef",
        fontStyle: " italic",
        token: "support.type",
      },
      {
        foreground: "66d9ef",
        fontStyle: " italic",
        token: "support.class",
      },
      {
        foreground: "f8f8f0",
        background: "ff79c6",
        token: "invalid",
      },
      {
        foreground: "f8f8f0",
        background: "bd93f9",
        token: "invalid.deprecated",
      },
      {
        foreground: "cfcfc2",
        token: "meta.structure.dictionary.json string.quoted.double.json",
      },
      {
        foreground: "6272a4",
        token: "meta.diff",
      },
      {
        foreground: "6272a4",
        token: "meta.diff.header",
      },
      {
        foreground: "ff79c6",
        token: "markup.deleted",
      },
      {
        foreground: "50fa7b",
        token: "markup.inserted",
      },
      {
        foreground: "e6db74",
        token: "markup.changed",
      },
      {
        foreground: "bd93f9",
        token: "constant.numeric.line-number.find-in-files - match",
      },
      {
        foreground: "e6db74",
        token: "entity.name.filename",
      },
      {
        foreground: "f83333",
        token: "message.error",
      },
      {
        foreground: "eeeeee",
        token:
          "punctuation.definition.string.begin.json - meta.structure.dictionary.value.json",
      },
      {
        foreground: "eeeeee",
        token:
          "punctuation.definition.string.end.json - meta.structure.dictionary.value.json",
      },
      {
        foreground: "8be9fd",
        token: "meta.structure.dictionary.json string.quoted.double.json",
      },
      {
        foreground: "f1fa8c",
        token: "meta.structure.dictionary.value.json string.quoted.double.json",
      },
      {
        foreground: "50fa7b",
        token:
          "meta meta meta meta meta meta meta.structure.dictionary.value string",
      },
      {
        foreground: "ffb86c",
        token:
          "meta meta meta meta meta meta.structure.dictionary.value string",
      },
      {
        foreground: "ff79c6",
        token: "meta meta meta meta meta.structure.dictionary.value string",
      },
      {
        foreground: "bd93f9",
        token: "meta meta meta meta.structure.dictionary.value string",
      },
      {
        foreground: "50fa7b",
        token: "meta meta meta.structure.dictionary.value string",
      },
      {
        foreground: "ffb86c",
        token: "meta meta.structure.dictionary.value string",
      },
    ],
    colors: {
      "editor.foreground": "#f8f8f2",
      "editor.background": "#282a36",
      "editor.selectionBackground": "#44475a",
      "editor.lineHighlightBackground": "#44475a",
      "editorCursor.foreground": "#f8f8f0",
      "editorWhitespace.foreground": "#3B3A32",
      "editorIndentGuide.activeBackground": "#9D550FB0",
      "editor.selectionHighlightBorder": "#222218",
    },
  });

  monaco.languages.registerCompletionItemProvider("pytuga", {
    provideCompletionItems: () => {
      var suggestions = [
        {
          label: "hello world",
          kind: monaco.languages.CompletionItemKind.Text,
          insertText: "mostre('Hello World')",
        },
        {
          label: "koch",
          kind: monaco.languages.CompletionItemKind.Text,
          insertText: `from turtle import *
definir função koch(tamanho, interações):
    se (interações == 0) então faça:
        frente(tamanho)
    senão faça:
        koch(tamanho/3, interações-1)
        esquerda(60)
        koch(tamanho/3, interações-1)
        direita(120)
        koch(tamanho/3, interações-1)
        esquerda(60)
        koch(tamanho/3, interações-1)


koch(400, 4)`,
        },
        {
          label: "testing",
          kind: monaco.languages.CompletionItemKind.Keyword,
          insertText: "testing(${1:condition})",
          insertTextRules:
            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
        },
        {
          label: "ifelse",
          kind: monaco.languages.CompletionItemKind.Snippet,
          insertText: [
            "if (${1:condition}) {",
            "\t$0",
            "} else {",
            "\t",
            "}",
          ].join("\n"),
          insertTextRules:
            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
          documentation: "If-Else Statement",
        },
      ];
      return { suggestions: suggestions };
    },
  });
}
